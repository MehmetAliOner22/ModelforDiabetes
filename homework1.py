# -*- coding: utf-8 -*-
"""Homework1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18TQK3lykK0ygW8DdebtkSrVqwASX68Ca

Kütüphaneler içe aktarılıyor.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""diabetes data seti içe aktarılıp bağımlı ve bağımsız değişkenler ayrılıyor."""

diabetes = pd.read_csv("diabetes.csv")
X = diabetes.iloc[:,:-1].values
y = diabetes.iloc[:,-1].values

X.shape

y.shape

"""Modelin doğruluğun ölçülmesi için veriler test edilecek veri oranı 0.3 olacak şekilde ayrılıyor."""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.3,random_state = 1)

X_train.shape

X_test.shape

"""X in değerlerin de standart sapmaya dahil edilmemesi gereken bir öznitelik var mı diye kontrol ediliyor."""

df = pd.DataFrame(X)
df.head()

"""Train ve test verilerinin standart sapmaları alınıyor."""

from sklearn.preprocessing import StandardScaler
st = StandardScaler()

X_train = st.fit_transform(X_train)
X_test = st.transform(X_test)

print(X_train)

print(X_test)

"""Logistic Regresyon modeli içe aktarılıyor ve bir nesne oluşturulup train verileri ile eğitiliyor."""

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train, y_train)

"""Katsayı değerleri yazdırılıyor."""

print(model.coef_)
print(model.intercept_)

"""score ile modelin üreteceği değer ve gerçek değerler hem train verileri için hemde test verileri için karşılaştırılıyor."""

train_accuracy = model.score(X_train, y_train)
test_accuracy = model.score(X_test, y_test)

print("Train Accuracy: " + format(train_accuracy * 100))
print("Test Accuracy: " + format(test_accuracy * 100))

"""Grid Search sınıfı içe aktarılıyor. Denenecek parametre dizileri oluşturuluyor. Grid Search sınıfından bir nesne oluşturuluyor gerekli parametreler veriliyor. Tüm parametreleri deneyen grid_search nesnesi en iyi parametreyi bulması için eğitiliyor. En iyi parametreler best_parameters'e aktarılıyor."""

from sklearn.model_selection import GridSearchCV

parameters = {
    'C': [0.2, 0.4, 0.6, 0.8, 1],# Parametreler önem sırasına göre dizilmiştir
    'solver': ["lbfgs", "liblinear", "newton-cg", "sag", "saga"],
    'max_iter': [100, 1000, 10000],
    'fit_intercept': [True, False],
    'intercept_scaling': [1, 2, 3],
    'class_weight': [None, 'balanced'],
    'random_state': [13],  # Bu adımdan sonra derlenme süresi oldukça uzun sürüyor
    #'tol': [1e-4, 1e-3, 1e-2],
    #'dual': [True, False],
    #'l1_ratio': [0.2, 0.4, 0.6, 0.8, 1],
    #'n_jobs': [1, -1]
}

grid_search = GridSearchCV(estimator=model,
                           param_grid=parameters,
                           scoring='accuracy',
                           cv=10,
                           n_jobs=-1)

grid_search.fit(X_train, y_train)
best_parameters = grid_search.best_params_

print("Best Parameters:", best_parameters)

"""Model en iyi parametrelerle tekrardan eğitiliyor ve farklı bir model olarak tutuluyor."""

best_model = LogisticRegression(**best_parameters)
best_model.fit(X_train, y_train)

"""Modelin kaybolmaması için joblib kütüphanesi kullanılıyor. best_model.pkl isminde bir dosya halinde tutulması sağlanıyor."""

import joblib

joblib.dump(best_model, 'best_model.pkl')

"""En iyi modelin katsayıları yazzdırılıyor."""

print(best_model.coef_)
print(best_model.intercept_)

"""En iyi model için score değerleri hesaplanıyor. Modelin bulduğu değerler ile gerçek değerler karşılaştırılıyor."""

train_accuracy = best_model.score(X_train, y_train)
test_accuracy = best_model.score(X_test, y_test)

print("Train Accuracy with Best Parameters: " + format(train_accuracy * 100))
print("Test Accuracy with Best Parameters: " + format(test_accuracy * 100))

"""Model kapatıldıktan sonra tekrar kullanılması için best_model.pkl tekrardan çağırılıyor."""

import joblib

loaded_model = joblib.load('best_model.pkl')

"""Çağırılan modelden test yapılıyor."""

y_pred1 = loaded_model.predict(st.transform([[1, 85, 66, 29, 94, 28.1, 0.200, 15]]))
y_pred2 = loaded_model.predict(st.transform([[5, 189, 60, 23, 846, 30.1, 0.345, 59]]))

print(y_pred1)
print(y_pred2)

